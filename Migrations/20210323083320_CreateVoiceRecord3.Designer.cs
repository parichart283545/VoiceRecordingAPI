// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VoiceRecordAPI.Data;

namespace VoiceRecordAPI.Migrations
{
    [DbContext(typeof(AppDBContext))]
    [Migration("20210323083320_CreateVoiceRecord3")]
    partial class CreateVoiceRecord3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VoiceRecordAPI.Models.CallType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.HasKey("Id");

                    b.ToTable("CallType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Detail = "Call-In",
                            IsActive = true,
                            Remark = "Income calling"
                        },
                        new
                        {
                            Id = 2,
                            Detail = "Call-Out",
                            IsActive = true,
                            Remark = "Outcome calling"
                        });
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Role","auth");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4db8696f-61c6-49a2-99c0-f8f3b969179a"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("837c4b89-c677-4fd0-9f4a-72ec62d2d216"),
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("4cb57245-8b10-4ce2-8170-c2a99b7f8880"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("660ee222-3eba-4175-93f3-b355b480bd8c"),
                            Name = "Developer"
                        });
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("User","auth");
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole","auth");
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.VoiceRecordConfigurations", b =>
                {
                    b.Property<string>("ParameterName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ValueBoolean")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValueDatetime")
                        .HasColumnType("datetime2");

                    b.Property<float>("ValueNumber")
                        .HasColumnType("real");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ParameterName");

                    b.ToTable("VoiceRecordConfigurations");

                    b.HasData(
                        new
                        {
                            ParameterName = "ThreeCXPath",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = ""
                        },
                        new
                        {
                            ParameterName = "ThreeCXPathFormat",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = ""
                        },
                        new
                        {
                            ParameterName = "ThreeCXFileFormatCallOut",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = "[DisplayName]_Extension-CalledNumber_YearMonthDayHourMinuteSecond(InternalCallIdentifier)"
                        },
                        new
                        {
                            ParameterName = "ThreeCXFileFormatCallIn",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = "[Extension%3ACalledNumber]_CalledNumber-Extension_YearMonthDayHourMinuteSecond(InternalCallIdentifier)"
                        },
                        new
                        {
                            ParameterName = "EricssonPath",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = ""
                        },
                        new
                        {
                            ParameterName = "EricssonPathFormat",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = ""
                        },
                        new
                        {
                            ParameterName = "EricssonFileFormatCallOut",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = "DateTime-Extentions"
                        },
                        new
                        {
                            ParameterName = "EricssonFileFormatCallIn",
                            ValueBoolean = false,
                            ValueDatetime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ValueNumber = 0f,
                            ValueString = "DateTime-Extentions"
                        });
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.VoiceRecordDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CallTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatetimeFileName")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExtensionNo")
                        .HasColumnType("int");

                    b.Property<DateTime>("FileCreateDatetime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FileModifyDatetime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<string>("FullPath")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<string>("PhoneNumberFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URLPath")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.Property<int>("VoiceRecordProvidersId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CallTypeId");

                    b.HasIndex("VoiceRecordProvidersId");

                    b.ToTable("VoiceRecordDetails");
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.VoiceRecordProviders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(4096);

                    b.HasKey("Id");

                    b.ToTable("VoiceRecordProviders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Detail = "3CX",
                            IsActive = true,
                            Remark = "3CX"
                        },
                        new
                        {
                            Id = 2,
                            Detail = "Ericsson",
                            IsActive = true,
                            Remark = "Ericsson"
                        });
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.UserRole", b =>
                {
                    b.HasOne("VoiceRecordAPI.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceRecordAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VoiceRecordAPI.Models.VoiceRecordDetails", b =>
                {
                    b.HasOne("VoiceRecordAPI.Models.CallType", "CallTypes")
                        .WithMany()
                        .HasForeignKey("CallTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VoiceRecordAPI.Models.VoiceRecordProviders", "VoiceRecordProvider")
                        .WithMany()
                        .HasForeignKey("VoiceRecordProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
